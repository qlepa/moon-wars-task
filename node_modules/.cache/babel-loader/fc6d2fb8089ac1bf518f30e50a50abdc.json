{"ast":null,"code":"var _jsxFileName = \"/home/klepa/Desktop/New-Moon/new-moon-wars/src/components/App.js\";\nimport React, { Component } from \"react\";\nimport swapi from \"../api/swapi\";\nimport Category from \"./Category/Category\";\nimport BattleGround from \"./BattleGround/BattleGround\";\nimport { Wrapper } from \"./Common/WrapperStyled/WrapperStyled\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.fetchCategoryCounter = category => {\n      return swapi.get(\"/\".concat(category)).then(response => response.data.count).catch(error => error);\n    };\n\n    this.fetchCards = async category => {\n      const counter = await this.fetchCategoryCounter(category);\n      const itemsPerPage = 10;\n      const rest = counter % 10;\n      const howManyPages = rest ? (counter / itemsPerPage + 1).toFixed(0) : (counter / itemsPerPage).toFixed(0);\n      console.log({\n        howManyPages\n      });\n      const page = Math.floor(Math.random() * howManyPages) + 1;\n      const link = \"/\".concat(category, \"/?page=\").concat(page);\n      const itemIndex = page === howManyPages ? rest - 1 : itemsPerPage;\n      const randomItem = Math.floor(Math.random() * itemIndex);\n      const response = await swapi.get(\"\".concat(link)).catch(error => error);\n\n      if (response.message) {\n        this.setState({\n          errorFetch: response.message,\n          finishFetch: true\n        });\n      } else {\n        this.setState(state => ({\n          cards: [...state.cards, response.data.results[randomItem]]\n        }));\n\n        if (this.state.cards.length === 2) {\n          this.setState({\n            finishFetch: true\n          });\n        }\n      }\n    };\n\n    this.renderView = view => {\n      this.setState({\n        view: view\n      });\n    };\n\n    this.resetGame = () => {\n      this.setState(this.baseState);\n    };\n\n    this.clearCards = () => {\n      this.setState({\n        cards: []\n      });\n    };\n\n    this.state = this.getInitialState();\n    this.baseState = this.state;\n  }\n\n  getInitialState() {\n    return {\n      errorFetch: null,\n      finishFetch: false,\n      view: \"Category\",\n      cards: []\n    };\n  }\n\n  render() {\n    switch (this.state.view) {\n      case \"BattleGround\":\n        return React.createElement(Wrapper, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 82\n          },\n          __self: this\n        }, React.createElement(BattleGround, {\n          fetchCards: this.fetchCards,\n          cards: this.state.cards,\n          clearCards: this.clearCards,\n          resetGame: this.resetGame,\n          errorFetch: this.state.errorFetch,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 83\n          },\n          __self: this\n        }));\n\n      default:\n        return React.createElement(Wrapper, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 94\n          },\n          __self: this\n        }, React.createElement(Category, {\n          fetchCards: this.fetchCards,\n          renderView: this.renderView,\n          finishFetch: this.state.finishFetch,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95\n          },\n          __self: this\n        }));\n    }\n\n    ;\n  }\n\n}\n\n;\nexport default App;","map":{"version":3,"sources":["/home/klepa/Desktop/New-Moon/new-moon-wars/src/components/App.js"],"names":["React","Component","swapi","Category","BattleGround","Wrapper","App","constructor","props","fetchCategoryCounter","category","get","then","response","data","count","catch","error","fetchCards","counter","itemsPerPage","rest","howManyPages","toFixed","console","log","page","Math","floor","random","link","itemIndex","randomItem","message","setState","errorFetch","finishFetch","state","cards","results","length","renderView","view","resetGame","baseState","clearCards","getInitialState","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport swapi from \"../api/swapi\";\n\nimport Category from \"./Category/Category\";\nimport BattleGround from \"./BattleGround/BattleGround\";\nimport { Wrapper } from \"./Common/WrapperStyled/WrapperStyled\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = this.getInitialState()\n    this.baseState = this.state;\n  };\n\n  getInitialState() {\n    return {\n      errorFetch: null,\n      finishFetch: false,\n      view: \"Category\",\n      cards: [],\n    }\n  }\n    \n  fetchCategoryCounter = category => {\n    return swapi\n      .get(`/${category}`)\n      .then(response => response.data.count)\n      .catch(error => error);\n  };\n\n  fetchCards = async category => {\n    const counter = await this.fetchCategoryCounter(category);\n    const itemsPerPage = 10;\n    const rest = counter % 10;\n    const howManyPages = rest\n      ? (counter / itemsPerPage + 1).toFixed(0)\n      : (counter / itemsPerPage).toFixed(0);\n      console.log({howManyPages})\n    const page = Math.floor(Math.random() * howManyPages) + 1;\n    const link = `/${category}/?page=${page}`;\n    const itemIndex = page === howManyPages ? rest - 1 : itemsPerPage;\n    const randomItem = Math.floor(Math.random() * itemIndex);\n    const response = await swapi.get(`${link}`).catch(error => error);\n\n    if (response.message) {\n      this.setState({\n        errorFetch: response.message,\n        finishFetch: true\n      });\n    } else {\n      this.setState(state => ({\n        cards: [...state.cards, response.data.results[randomItem]]\n      }));\n      if (this.state.cards.length === 2) {\n        this.setState({\n          finishFetch: true\n        });\n      }\n    }\n  };\n\n  renderView = view => {\n    this.setState({\n      view: view\n    });\n  };\n\n  resetGame = () => {\n    this.setState(this.baseState);\n  };\n\n  clearCards = () => {\n    this.setState({\n      cards: []\n    });\n  };\n\n  render() {\n    switch (this.state.view) {\n      case \"BattleGround\":\n        return (\n          <Wrapper>\n            <BattleGround\n              fetchCards={this.fetchCards}\n              cards={this.state.cards}\n              clearCards={this.clearCards}\n              resetGame={this.resetGame}\n              errorFetch={this.state.errorFetch}\n            />\n          </Wrapper>\n        );\n      default:\n        return (\n          <Wrapper>\n            <Category\n              fetchCards={this.fetchCards}\n              renderView={this.renderView}\n              finishFetch={this.state.finishFetch}\n            />\n          </Wrapper>\n        );\n    };\n  };\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}