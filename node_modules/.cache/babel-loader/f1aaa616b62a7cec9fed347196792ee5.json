{"ast":null,"code":"var _jsxFileName = \"/home/klepa/Desktop/New-Moon/new-moon-wars/src/components/BattleGround/BattleGround.js\";\nimport React, { PureComponent, Fragment } from \"react\";\nimport { Title } from \"../Common/TitleStyled/TitleStyled\";\nimport { BattleWrapper } from \"./BattleWrapperStyled/BattleWrapperStyled\";\nimport { Table } from \"./TableStyled/TableStyled\";\nimport { Header } from \"../Common/HeaderStyled/HeaderStyled\";\nimport { Result } from \"./ResultStyled/ResultStyled\";\nimport { Button } from \"../Common/ButtonStyled/ButtonStyled\";\nimport { Loading } from \"../Common/LoadingStyled/LoadingStyled\";\nimport { ErrorPage } from \"../Common/ErrorPageStyled/ErrorPageStyled\";\nimport CardItem from \"../CardItem/CardItem\";\n\nclass BattleGround extends PureComponent {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      atributes: [],\n      category: null,\n      loading: false\n    };\n\n    this.renderCard = () => {\n      const cards = this.props.cards;\n      return cards.map((card, key) => {\n        return React.createElement(CardItem, {\n          card: card,\n          key: key,\n          id: key + 1,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 37\n          },\n          __self: this\n        });\n      });\n    };\n\n    this.setAtributes = () => {\n      const cards = this.props.cards;\n      cards.map(atr => {\n        this.setState(state => ({\n          atributes: [...state.atributes, atr.mass || atr.crew],\n          category: atr.mass ? \"people\" : \"starships\"\n        }));\n      });\n    };\n\n    this.checkWhoWins = () => {\n      const atributes = this.state.atributes;\n\n      if (atributes[0] === 'unknown' || atributes[1] === 'unknown') {\n        return React.createElement(\"h2\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 55\n          },\n          __self: this\n        }, \"Atribute unknown. Play again\");\n      } else if (parseInt(atributes[0]) > parseInt(atributes[1])) {\n        return React.createElement(\"h2\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 57\n          },\n          __self: this\n        }, \"Player 1 Wins!\");\n      } else if (parseInt(atributes[0]) < parseInt(atributes[1])) {\n        return React.createElement(\"h2\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 59\n          },\n          __self: this\n        }, \"Player 2 Wins!\");\n      } else {\n        return React.createElement(\"h2\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 61\n          },\n          __self: this\n        }, \"Draw!\");\n      }\n\n      ;\n    };\n  }\n\n  componentDidMount() {\n    this.setAtributes();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.cards !== this.props.cards) {\n      this.setState({\n        atributes: []\n      });\n      this.setAtributes();\n    }\n\n    ;\n  }\n\n  playAgain() {\n    const _this$props = this.props,\n          clearCards = _this$props.clearCards,\n          fetchCards = _this$props.fetchCards;\n    const category = this.state.category;\n    this.setState({\n      loading: true\n    });\n    clearCards();\n    fetchCards(category);\n    fetchCards(category).then(() => this.closeLoading());\n  }\n\n  closeLoading() {\n    this.setState({\n      loading: false\n    });\n  }\n\n  render() {\n    const _this$props2 = this.props,\n          errorFetch = _this$props2.errorFetch,\n          resetGame = _this$props2.resetGame;\n    return React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, React.createElement(Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, React.createElement(Title, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, \"Moon Wars\"), errorFetch && React.createElement(ErrorPage, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, errorFetch)), React.createElement(BattleWrapper, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, React.createElement(Table, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, this.renderCard()), React.createElement(Result, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, this.state.atributes.length === 2 && this.checkWhoWins()), React.createElement(Button, {\n      onClick: () => this.playAgain(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, \"PLAY AGAIN\"), React.createElement(Button, {\n      onClick: () => resetGame(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, \"Go Back\")), this.state.loading && React.createElement(Loading, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }));\n  }\n\n}\n\n;\nexport default BattleGround;","map":{"version":3,"sources":["/home/klepa/Desktop/New-Moon/new-moon-wars/src/components/BattleGround/BattleGround.js"],"names":["React","PureComponent","Fragment","Title","BattleWrapper","Table","Header","Result","Button","Loading","ErrorPage","CardItem","BattleGround","state","atributes","category","loading","renderCard","cards","props","map","card","key","setAtributes","atr","setState","mass","crew","checkWhoWins","parseInt","componentDidMount","componentDidUpdate","prevProps","playAgain","clearCards","fetchCards","then","closeLoading","render","errorFetch","resetGame","length"],"mappings":"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","sourcesContent":["import React, { PureComponent, Fragment } from \"react\";\n\nimport { Title } from \"../Common/TitleStyled/TitleStyled\";\nimport { BattleWrapper } from \"./BattleWrapperStyled/BattleWrapperStyled\";\nimport { Table } from \"./TableStyled/TableStyled\";\nimport { Header } from \"../Common/HeaderStyled/HeaderStyled\";\nimport { Result } from \"./ResultStyled/ResultStyled\";\nimport { Button } from \"../Common/ButtonStyled/ButtonStyled\";\nimport { Loading } from \"../Common/LoadingStyled/LoadingStyled\";\nimport { ErrorPage } from \"../Common/ErrorPageStyled/ErrorPageStyled\";\nimport CardItem from \"../CardItem/CardItem\";\n\nclass BattleGround extends PureComponent {\n  state = {\n    atributes: [],\n    category: null,\n    loading: false,\n  };\n\n  componentDidMount() {\n    this.setAtributes();\n  };\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.cards !== this.props.cards) {\n      this.setState({\n        atributes: []\n      });\n      this.setAtributes();\n    };\n  };\n\n  renderCard = () => {\n    const { cards } = this.props;\n\n    return cards.map((card, key) => {\n      return <CardItem card={card} key={key} id={key+1} />;\n    });\n  };\n\n  setAtributes = () => {\n    const { cards } = this.props;\n    cards.map(atr => {\n      this.setState(state => ({\n        atributes: [...state.atributes, atr.mass || atr.crew],\n        category: atr.mass ? \"people\" : \"starships\"\n      }))\n    });\n  };\n\n  checkWhoWins = () => {\n    const { atributes } = this.state;\n\n    if (atributes[0] === 'unknown' || atributes[1] === 'unknown') {\n      return <h2>Atribute unknown. Play again</h2>;\n    } else if (parseInt(atributes[0]) > parseInt(atributes[1])) {\n      return <h2>Player 1 Wins!</h2>;\n    } else if (parseInt(atributes[0]) < parseInt(atributes[1])) {\n      return <h2>Player 2 Wins!</h2>;\n    } else {\n      return <h2>Draw!</h2>\n    };\n  };\n\n  playAgain() {\n    const { clearCards, fetchCards } = this.props;\n    const { category } = this.state;\n\n    this.setState({\n      loading: true\n    });\n    clearCards();\n    fetchCards(category);\n    fetchCards(category).then(() => this.closeLoading());\n  };\n\n  closeLoading() {\n    this.setState({\n      loading: false\n    })\n  }\n\n  render() {\n    const { errorFetch, resetGame } = this.props\n    return (\n      <Fragment>\n        <Header>\n          <Title>Moon Wars</Title>\n          {errorFetch && (\n            <ErrorPage>{errorFetch}</ErrorPage>\n          )}\n        </Header>\n        <BattleWrapper>\n          <Table>{this.renderCard()}</Table>\n          <Result>\n            {this.state.atributes.length === 2 && this.checkWhoWins()}\n          </Result>\n          <Button onClick={() => this.playAgain()}>PLAY AGAIN</Button>\n          <Button onClick={() => resetGame()}>Go Back</Button>\n        </BattleWrapper>\n        {this.state.loading && <Loading />}\n      </Fragment>\n    );\n  };\n};\n\nexport default BattleGround;\n"]},"metadata":{},"sourceType":"module"}